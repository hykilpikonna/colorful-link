$gridColor: #607d8b;
$gridActiveColor: #90a4ae;
$gridHoverColor: #eceff1;
$invalidColor: #ff8a80;
$validColor: #00e676;

$transitionDuration: 0.2s;

$gridScale: 1;

$nodeSize: $gridScale * 6px;
@media (max-width: 500px) {
  $gridScale: 0.5;
}
$nodeActiveSize: $gridScale * 7px;

$edgeLength: $gridScale * 50px;
$edgeBreadth: $gridScale * 2px;

$fontSize: $gridScale * 24px;

$animationSeperation: 0.075s;
$animationScale: 1.5;
$animationDuration: 0.25s;
$animationTimingFunction: linear;
$animationFillMode: forwards;

// canvas
.row, .canvas {
  display: flex;
  justify-content: center;
  align-items: center;
}

.canvas {
  align-items: flex-start;
  flex-direction: column;
  overflow-x: auto;
  box-sizing: border-box;
  max-width: 100%;
  padding: 50px;
  border-radius: 10px;
  background-color: #282c34;

  &.readOnly, &.passed {
    * {
      pointer-events: none;
      cursor: default;
    }
  }
}

// grid elements
.node {
  display: flex;
  height: $nodeSize;
  width: $nodeSize;
  background-color: $gridColor;
  border-radius: 50%;
  z-index: 1;
  transition: background-color $transitionDuration;

  &.active {
    background-color: $gridActiveColor;
    width: $nodeActiveSize;
    height: $nodeActiveSize;
    margin: - ($nodeActiveSize - $nodeSize) / 2;
  }
}

.line {
  display: flex;
  $lineColor: $gridColor;
  background-repeat: repeat;
  opacity: 0;
  position: relative;
  cursor: pointer;
  $interactionOffset: ($nodeSize - $edgeBreadth) * 4;

  &:after, &:before {
    content: "";
    background-color: transparent;
    position: absolute;
  }

  &.horizontal {
    background-size: 4*$edgeBreadth 100%;
    background-image: linear-gradient(90deg, $lineColor 50%, transparent 50%);
    height: $edgeBreadth;
    width: $edgeLength;

    &:after, &:before {
      height: $interactionOffset;
      width: 100%;
      left: 0;
    }

    &:after {
      top: 100%;
    }

    &:before {
      bottom: 100%;
    }
  }

  &.vertical {
    background-size: 100% 4*$edgeBreadth;
    background-image: linear-gradient(180deg, $lineColor 50%, transparent 50%);
    height: $edgeLength;
    width: $edgeBreadth;
    margin: 0 ($nodeSize - $edgeBreadth) / 2;

    &:after, &:before {
      width: $interactionOffset;
      height: 100%;
      top: 0;
    }

    &:after {
      right: 100%;
    }

    &:before {
      left: 100%;
    }
  }

  &:hover, &.hovered {
    transition: opacity $transitionDuration;
    opacity: 1;
  }

  &.active {
    opacity: 1;
    background: $gridActiveColor;
    transition: background-color $transitionDuration;

    &:hover {
      background: $gridHoverColor;

      &.horizontal {
        height: 1.5 * $edgeBreadth;
      }

      &.vertical {
        width: 1.5 * $edgeBreadth;
        margin: 0 (($nodeSize - 1.5 * $edgeBreadth) / 2);
      }
    }
  }

  &.cross {
    opacity: 1;
    background: none;
    display: flex;
    align-items: center;
    justify-content: center;

    & > span {
      position: absolute;
      width: 6 * $edgeBreadth;
      height: 3 * $edgeBreadth / 4;
      background-color: $invalidColor;
      border-radius: 2 * $edgeBreadth;
      transition: all $transitionDuration;

      &:first-child {
        transform: rotate(45deg);
      }

      &:last-child {
        transform: rotate(-45deg);
      }
    }

    &:hover {
      & > span {
        width: 7 * $edgeBreadth;
        height: $edgeBreadth;
        background-color: $gridHoverColor;
      }
    }
  }
}

.number {
  font-size: $fontSize;
  display: flex;
  align-items: center;
  justify-content: center;
  height: $edgeLength;
  width: $edgeLength;
  user-select: none;

  .invalid {
    color: $invalidColor;
  }

  input {
    text-align: center;
    height: inherit;
    width: inherit;
    background: inherit;
    outline: none;
    box-shadow: none;
    border: inherit;
    color: inherit;
    font-size: inherit;
    display: inherit;
    align-items: inherit;
    justify-content: inherit;
    cursor: inherit;
  }
}

.canvas.failed {
  .node.active  {
    background-color: $invalidColor;
  }

  .line {
    &:not(.cross){
      &:not(:hover) {
        background-color: $invalidColor;      
      }
    }
  }
}

.canvas.passed {

  .node.active {
    animation: node $animationDuration $animationTimingFunction $animationFillMode;
  }

  .line:not(.cross) {
    &.horizontal {
      animation: lineX $animationDuration $animationTimingFunction $animationFillMode;
    }

    &.vertical {
      animation: lineY $animationDuration $animationTimingFunction $animationFillMode;
    }
  }

  .node.active, .line:not(.cross) {
    @for $i from 1 through 50 {
      &:nth-child(#{$i}) {
        animation-delay: ($i - 1) * $animationSeperation;
      }
    }
  }

}

@keyframes node {
  0% {
    background-color: $validColor;
    transform: scale(1);
  }
  50% {
    transform: scale($animationScale);
  }
  100% {
    background-color: $validColor;
    transform: scale(1);
  }
}

@keyframes lineX {
  0% {
    background-color: $validColor;
    transform: scaleY(1);
  }
  50% {
    transform: scaleY(1.5 * $animationScale);
  }
  100% {
    background-color: $validColor;
    transform: scaleY(1);
  }
}


@keyframes lineY {
  0% {
    background-color: $validColor;
    transform: scaleX(1);
  }
  50% {
    transform: scaleX(1.5 * $animationScale);
  }
  100% {
    background-color: $validColor;
    transform: scaleX(1);
  }
}
